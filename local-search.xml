<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>N1+手机USB共享网络+Openwrt+V2</title>
    <link href="/2020/12/31/bb3180dd6d20/"/>
    <url>/2020/12/31/bb3180dd6d20/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一阵子看到大佬编译了树莓派的openwrt，就想搞个，但是我没有树莓派啊。于是拿出了吃灰许久的N1，想着给它编译个openwrt，毕竟废物利用嘛。</p><p>再一想，我也没有4G网卡，那么就用手机USB共享网络吧。于是，经过三四天的反复编译，一个比较满意的版本出来了，首先说明，大概不支持USB 4G网卡。我把手机USB共享网络的驱动编译了，至于4G网卡的驱动我随便选了几个，不确定是否支持。</p><h1 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h1><p><a href="https://imgrams-my.sharepoint.com/:f:/g/personal/godcic_imgram_ml/Emucnt9ncY5Kv6Jswhi4U6UB7T1gwwefltIaNGaZIFAk_g?e=Xl2gyN">OneDirve</a></p><h1 id="刷入镜像"><a href="#刷入镜像" class="headerlink" title="刷入镜像"></a>刷入镜像</h1><p>解压得到镜像，写入U盘，插到N1，待N1启动后，通过SSH连接。</p><p>默认IP：<code>192.168.1.1</code><br>用户名：<code>root</code><br>密码：<code>password</code></p><pre><code class="hljs awk"><span class="hljs-comment"># 将镜像写入到emmc</span><span class="hljs-regexp">/root/i</span>nst-to-emmc.sh<span class="hljs-comment"># 安装完成后，重启N1，拔掉U盘</span>reboot</code></pre><h1 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h1><h2 id="设置手机USB网络共享"><a href="#设置手机USB网络共享" class="headerlink" title="设置手机USB网络共享"></a>设置手机USB网络共享</h2><p>重启完成后，手机连接N1，并开启USB网络共享。通过SSH连接N1。</p><pre><code class="hljs vala"><span class="hljs-meta"># 输入命令，可以看到有一个 usb0 网络接口，即为手机网络端口。但此时用 ifconfig 是无法查看到的</span>ifconfig -a<span class="hljs-meta"># 输入以下命令</span>udhcpc -i usb0<span class="hljs-meta"># 此时，用 ifconfig 可查看到usb0网络端口</span>ifconfig</code></pre><h2 id="有线网络"><a href="#有线网络" class="headerlink" title="有线网络"></a>有线网络</h2><p>通过浏览器进入路由器后台192.168.1.1，网络 -&gt; 接口 -&gt; 添加新接口</p><p>新接口的名称：Mobile(名称随意，符合规则即可)<br>新接口的协议：DHCP客户端<br>包括以下接口：usb0</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201231184632.png"></p><p>完成后，提交。此时，如果你的手机能联网，应该就可以上网了。<br>PS：可以设置下新添加接口的 <code>防火墙设置</code> ，将其设置为 <code>wan:</code> 。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201231184657.png"></p><h2 id="无线网络"><a href="#无线网络" class="headerlink" title="无线网络"></a>无线网络</h2><p>网络 -&gt; 无线</p><p>因为已经存在WIFI了，修改即可。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201231185002.png"></p><p>WIFI信道选择 <code>36(5180 MHz)</code>。<br>网络选上刚刚添加的接口。<br>想给WIFI加密的话，到 <code>无线安全</code> 里添加。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201231185247.png"></p><p><code>保存&amp;应用</code> 后，可能存在无法联网的情况。此时，重启N1，待开机后，手机重新开启USB网络共享即可。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>此时，应该还是使用手机进行代理的，借助工具，可以让手机只开启USB网络共享即可，不做详细介绍了。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201231190216.png"></p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>N1</tag>
      
      <tag>Openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle Cloud 通过DD磁盘来拯救启动失败的机器</title>
    <link href="/2020/11/28/36c91f32d24b/"/>
    <url>/2020/11/28/36c91f32d24b/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Oracle Cloud 可以免费使用2台VPS。如果由于误操作导致无法开机，又不想删鸡重新创建实例的话，可以将引导卷挂载到<code>另一台正常运行</code>的VPS上，进行DD操作复活。</p><p>两个引导卷的大小应该要一致，因为是克隆磁盘。如果大小不一致会有什么后果，我没有尝试……</p><h1 id="1、分离坏的引导卷"><a href="#1、分离坏的引导卷" class="headerlink" title="1、分离坏的引导卷"></a>1、分离坏的引导卷</h1><p>将不能正常运行的VPS的引导分离。</p><p>在 <code>计算机</code> &gt; <code>实例</code> 中选择不能正常运行的VPS，查看详情信息。在左下部选项中选择 <code>引导卷</code> 进行分离。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132001.png"></p><h1 id="2、附加坏的引导卷"><a href="#2、附加坏的引导卷" class="headerlink" title="2、附加坏的引导卷"></a>2、附加坏的引导卷</h1><p>引导卷分离完成后，打开可以正常运行的VPS的详细信息页面，在左下部选项中选择 <code>附加的块存储卷</code> 附加。</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132002.png"></p><p>选择要附加的引导卷。</p><h1 id="3、进行磁盘克隆"><a href="#3、进行磁盘克隆" class="headerlink" title="3、进行磁盘克隆"></a>3、进行磁盘克隆</h1><h2 id="查看附加的引导卷的-iSCSI命令和信息"><a href="#查看附加的引导卷的-iSCSI命令和信息" class="headerlink" title="查看附加的引导卷的 iSCSI命令和信息"></a>查看附加的引导卷的 <code>iSCSI命令和信息</code></h2><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132044.png"><br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132043.png"></p><h2 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h2><p>SSH连接正常的VPS，复制上一步获取到的 <code>用于连接的命令</code> 到控制台，三行都复制，直接回车，会有 <code>successful</code> 的提示。</p><p>如果出现<code>sudo: iscsiadm: command not found</code> 错误：</p><pre><code class="hljs vala"><span class="hljs-meta"># 在linux上安装iscsi客户端</span><span class="hljs-meta">#centos/redhalt系列</span>yum install -y iscsi-initiator-utils    <span class="hljs-meta">#debian系列</span>apt install -y open-iscsi<span class="hljs-meta"># 安装完成后重新执行连接命令</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132132.png"></p><h2 id="磁盘克隆"><a href="#磁盘克隆" class="headerlink" title="磁盘克隆"></a>磁盘克隆</h2><p><code>fdisk -l</code> 查看已挂载的磁盘信息。</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132131.png"></p><p>我这里有两块磁盘 <code>sda</code> 和 <code>sdb</code>。</p><p>因为克隆磁盘比较耗时，因此建议通过<code>screen</code>进行操作，防止意外断开连接，导致操作中断。</p><pre><code class="hljs routeros"><span class="hljs-comment"># 查看已挂载的磁盘信息</span>fdisk -l<span class="hljs-comment"># screen </span>screen -S q<span class="hljs-comment"># 进行磁盘克隆</span>dd <span class="hljs-attribute">if</span>=/dev/sda <span class="hljs-attribute">of</span>=/dev/sdb <span class="hljs-attribute">bs</span>=10M <span class="hljs-attribute">count</span>=100000</code></pre><p>如果想要查看克隆进度，另开一个SSH窗口，输入命令 <code>watch -n 5 pkill -USR1 ^dd$</code> ，再选择原来的窗口，即可看到进度显示。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132223.png"></p><h1 id="4、挂载回坏的VPS"><a href="#4、挂载回坏的VPS" class="headerlink" title="4、挂载回坏的VPS"></a>4、挂载回坏的VPS</h1><p>克隆完成后，通过获取的<code>iSCSI命令和信息</code>中<code>用于断开连接的命令</code>，在终端输入并运行。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132222.png"><br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132221.png"></p><p>在网页上分离附加的块存储卷。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132318.png"></p><p>在坏的VPS的详细信息页面附加引导卷，启动实例即可。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205132317.png"></p><p>最后，如果因为<code>sudo: iscsiadm: command not found</code>错误，安装了<code>iscsi</code>，建议卸载。</p><pre><code class="hljs routeros"><span class="hljs-comment">#centos/redhalt系列</span>yum <span class="hljs-builtin-name">remove</span> -y iscsi-initiator-utils    <span class="hljs-comment">#debian系列</span>apt <span class="hljs-builtin-name">remove</span> -y open-iscsi</code></pre><hr><p>参考：<a href="https://www.bilibili.com/video/av73322794/">oracle终身免费VPS通过DD磁盘来拯救启动失败的机器</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用免费Docker容器镜像服务搭建无限容量不限速的网盘</title>
    <link href="/2020/11/03/257b27bd3086/"/>
    <url>/2020/11/03/257b27bd3086/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong><font color=D22222>特别说明：这里只是分享相关技术，请不要乱用资源！造成任何后果与本博无关！感谢大家理解！</font></strong></p><p>目前多家大的服务商都提供了免费的Docker容器镜像服务。国内也有一些，比如阿里云，方便国内使用。前一段时间看到一个开源项目，利用容器镜像服务来存放一些文件。上传和下载速度都还不错。这里分享一下。</p><p>这个开源项目是用Dart开发语言编写的，Dart 是一个来自Google的为全平台构建快速应用的客户端优化的编程语言。</p><p>项目详情请查看Github，这里只说明使用方法。<br>项目地址：<a href="https://github.com/xausky/DockerRegisterCloud">https://github.com/xausky/DockerRegisterCloud</a></p><p>可供免费使用的Doker仓库：</p><p><strong>国内：</strong><br>阿里云：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a><br>华为云：<a href="https://console.huaweicloud.com/swr">https://console.huaweicloud.com/swr</a></p><p><strong>国外：</strong><br>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h1 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h1><p>根据自己的平台下载对应客户端版本。<br>地址：<a href="https://github.com/xausky/DockerRegisterCloud/releases">https://github.com/xausky/DockerRegisterCloud/releases</a><br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131028.png"></p><h1 id="Docker-Hub中使用"><a href="#Docker-Hub中使用" class="headerlink" title="Docker Hub中使用"></a><code>Docker Hub</code>中使用</h1><p>1、注册一个  <a href="https://hub.docker.com/">Docker Hub</a> 账号。这个没什么难度，注册好后，保存好账号密码。</p><p>2、新建一个仓库，名称随意。建议建立私有仓库。<br>地址：<a href="https://hub.docker.com/repository/create">https://hub.docker.com/repository/create</a><br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131119.png"></p><p>3、然后在<code>Docker Commands</code>中复制红框部分，就是你的仓库地址。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131122.png"></p><p>4、将复制的内容粘贴到地址栏。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131118.png"></p><p>5、点击<code>刷新</code>按钮或按回车键会进行连接，输入你的账号和密码。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131120.png"></p><p>6、登录成功后，即可进行文件上传、下载、管理等操作。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131121.png"></p><h1 id="阿里云中使用"><a href="#阿里云中使用" class="headerlink" title="阿里云中使用"></a>阿里云中使用</h1><p>1、开通阿里云免费的Docker存储。<br>登陆阿里云，然后访问：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a><br>首先要设置登陆密码，这个密码后面会使用到。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131408.png"></p><p>2、根据提示创建使用仓库。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131407.png"><br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131405.png"></p><p>3、创建完成后，点击仓库，进入后，复制<code>公网地址</code>到客户端地址进行登录即可。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131406.png"></p><h1 id="华为云中使用"><a href="#华为云中使用" class="headerlink" title="华为云中使用"></a>华为云中使用</h1><p>1、首先注册 <a href="https://activity.huaweicloud.com/">华为云</a> 账号，已有账号请跳过。然后 <a href="https://console.huaweicloud.com/swr">开通服务</a> 。</p><p>2、首先需要创建组织，请记住组织名。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131538.png"></p><p>3、点击网页右上角<code>登录指令</code>，生成登录信息。<br><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205131539.png"><br>如图所示。</p><p>用户名：cn-east-3@WTC8VWSLPVYZDQW5O341<br>密码：ffd166984983f341ad2563f06a09244c8f9516ef2ba7c073186a5e4598eb584d<br>仓库地址：swr.cn-east-3.myhuaweicloud.com/<font color=red>imgram</font>/<font color=red>pan</font></p><p>仓库地址后面的内容自己定义，没有要求。</p><p>有了这些信息后，就可以在客户端登录使用了。但是华为云针对登陆指令做了过期时间的限制，有效期只有1天。所以不推荐使用华为云。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的搭建和基本使用</title>
    <link href="/2020/10/28/0d2e8d22f8e8/"/>
    <url>/2020/10/28/0d2e8d22f8e8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用Hexo + github可以快速方便的搭建个人博客。本篇文章以windows平台为例，其他平台请做参考，接下来说说搭建过程和基本使用。</p><h1 id="一、安装Git"><a href="#一、安装Git" class="headerlink" title="一、安装Git"></a>一、安装<code>Git</code></h1><p><code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速进行项目版本管理。在这里就是用来管理Hexo博客文章，上传到GitHub的工具。廖雪峰老师的Git教程写的非常好，大家可以了解一下。</p><p>廖雪峰Git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/89604348802960</a></p><p>直接到Git官网下载安装，安装完成后通过 <code>Git Bash</code> 工具进行项目管理。当然你也可以添加环境变量，通过 <code>Windows PowerShell</code> 使用 Git。</p><p>Git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>Git下载：<a href="https://git-scm.com/download/">https://git-scm.com/download/</a></p><p><code>Git</code> 初始化</p><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;yourname&quot;</span>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;youremail&quot;</span></code></pre><h1 id="二、安装NodeJS"><a href="#二、安装NodeJS" class="headerlink" title="二、安装NodeJS"></a>二、安装<code>NodeJS</code></h1><p>因为Hexo是基于NodeJS编写的，所以需要安装NodeJS和相关的npm工具。</p><p>NodeJS官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>NodeJS下载：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>选择 <code>LTS</code> 版本下载安装即可。</p><h1 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装<code>Hexo</code></h1><p><code>Git</code>和<code>NodeJS</code>安装完成后就可以安装Hexo了。</p><ul><li><p>创建一个目录来存放文件，也就是整个博客项目。</p></li><li><p>然后在该目录下右键打开<code>Git Bash</code>（已添加 <code>Git</code> 全局变量可以使用 <code>Windows PowerShell</code> ）。输入命令 <code>npm install -g hexo</code> 安装 <code>Hexo</code>，这里是全局安装，安装完成后可以直接使用<code>Windows PowerShell</code>进行<code>Hexo</code>操作。</p></li><li><p>安装完成后，初始化一下<code>Hexo</code>。输入命令 <code>hexo init</code> 就会自动构建一个 <code>Hexo</code> 项目。本地运行 <code>hexo s</code> ，通过访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到效果了。</p>  <pre><code class="hljs awk"><span class="hljs-regexp">//</span> 全局安装npm install -g hexo<span class="hljs-regexp">//</span> 初始化hexo init<span class="hljs-regexp">//</span> 本地运行hexo s</code></pre></li></ul><h1 id="四、GitHub创建个人仓库"><a href="#四、GitHub创建个人仓库" class="headerlink" title="四、GitHub创建个人仓库"></a>四、<code>GitHub</code>创建个人仓库</h1><ul><li>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到 <code>GitHub Page</code> 的时候，才会被识别，也就是 <code>xxx.github.io</code>，其中 <code>xxx</code> 就是你注册 <code>GitHub</code> 的用户名。</li></ul><h1 id="五、将Hexo部署到GitHub"><a href="#五、将Hexo部署到GitHub" class="headerlink" title="五、将Hexo部署到GitHub"></a>五、将<code>Hexo</code>部署到<code>GitHub</code></h1><ul><li><p>打开站点配置文件 <code>_config.yml</code>，下滑到最后修改 <code>deploy</code>，类似（修改其中<code>Godcic</code>为你自己的<code>GitHub</code>名称）：</p>  <pre><code class="hljs groovy"><span class="hljs-attr">deploy:</span><span class="hljs-attr">type:</span> git<span class="hljs-attr">repo:</span> <span class="hljs-attr">https:</span><span class="hljs-comment">//github.com/Godcic/Godcic.github.io.git</span><span class="hljs-attr">branch:</span> master</code></pre></li><li><p>想要推送项目到<code>GitHub</code>需要借助<code>hexo-deployer-git</code>工具，通过命令<code>npm install hexo-deployer-git --save</code>安装。</p>  <pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre></li><li><p>部署到<code>GitHub</code></p>  <pre><code class="hljs verilog">hexo cleanhexo <span class="hljs-keyword">generate</span>hexo deploy</code></pre></li><li><p>运行上面的命令后就自动部署，完成后就可以查看效果</p><p>  <a href="https://godcic.github.io/">https://Godcic.github.io/</a></p></li><li><p>里面还有一些配置参数，可以看着改。</p></li></ul><h1 id="六、设置个人域名"><a href="#六、设置个人域名" class="headerlink" title="六、设置个人域名"></a>六、设置个人域名</h1><p>如果想绑定自己的域名，比如我的域名 <a href="https://blog.umoe.vip/">blog.umoe.vip</a> 就绑定在这上面。</p><ul><li>登录<code>GitHub</code>，进入之前创建的仓库，点击<code>setting</code>，下滑找到<code>GitHub Pages</code>选项，设置<code>Custom domain</code>，填上你的域名，记得在你的域名注册商添加域名解析。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130817.png"></p><ul><li><p>然后在本地的博客文件目录下的<code>source</code>目录下新建一个<code>CNAME</code>文件，没有后缀名，里面填写你的域名，我这里是<code>blog.umoe.vip</code>。同时要将<code>_config.yml</code>中的<code>url</code>改为你的新网址。</p></li><li><p>最后部署到<code>GitHub</code></p>  <pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span></code></pre></li></ul><p>过一会就可以通过你的域名访问搭建的网站了。</p><h1 id="七、基本配置"><a href="#七、基本配置" class="headerlink" title="七、基本配置"></a>七、基本配置</h1><h2 id="1、Hexo基本配置"><a href="#1、Hexo基本配置" class="headerlink" title="1、Hexo基本配置"></a>1、<code>Hexo</code>基本配置</h2><p>在本地文件根目录下的<code>_config.yml</code>中就是整个<code>Hexo</code>框架的配置文件，可以修改大部分的配置。详情可以参考官方的配置描述。</p><p>官方配置描述：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><h2 id="2、更换主题"><a href="#2、更换主题" class="headerlink" title="2、更换主题"></a>2、更换主题</h2><p>默认的主题<code>landscape</code>如果不喜欢就可以到官网的主题中选择一个喜欢的主题进行修改就可以了。</p><p><code>Hexo</code>官方主题站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>我个人使用的是<code>Fluid</code>，给大家推荐下：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>更改主题要修改<code>_config.yml</code>中<code>theme</code>对应的值。</p><h2 id="3、部署优化"><a href="#3、部署优化" class="headerlink" title="3、部署优化"></a>3、部署优化</h2><p>每次都要执行<code>hexo clean</code> <code>hexo deploy</code>，不如写个新的脚本。</p><p>修改录下的<code>package.json</code>文件:</p><pre><code class="hljs 1c"><span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;hexo clean &amp; hexo deploy&quot;</span>,</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130816.png"></p><p>部署命令就可以改为：</p><pre><code class="hljs dockerfile">npm <span class="hljs-keyword">run</span><span class="bash"> build</span></code></pre><h1 id="八、撰写文章"><a href="#八、撰写文章" class="headerlink" title="八、撰写文章"></a>八、撰写文章</h1><p>通过命令<code>hexo new [layout] &lt;title&gt;</code>来创建一个页面。</p><p><code>[layout]</code>布局，可选项为 <code>post</code>、<code>page</code>、<code>draft</code>，这将决定文章所在文件路径。</p><style>table th:first-of-type {    width: 160pt;}table th:nth-of-type(2) {    width: 160pt;}</style><table><thead><tr><th align="center">布局</th><th align="center">路径</th></tr></thead><tbody><tr><td align="center"><code>post</code></td><td align="center"><code>source/_posts</code></td></tr><tr><td align="center"><code>page</code></td><td align="center"><code>source</code></td></tr><tr><td align="center"><code>draft</code></td><td align="center"><code>source/_drafts</code></td></tr></tbody></table><p>如果不设置<code>[layout]</code>则默认是<code>post</code>。</p><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;新的文章&quot;</span></code></pre><p>创建好页面后在对应目录下找到文件，进行文章编写。<code>Hexo</code>支持使用Markdown语法。</p><hr><p>参考：<br><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a><br><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">Hexo史上最全搭建教程</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Photoshop 快速更改证件照背景</title>
    <link href="/2020/09/11/a54e2a26ecc2/"/>
    <url>/2020/09/11/a54e2a26ecc2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般我们在照相馆拍摄证件照时，可能只会拍摄一种背景色，但是在实际使用时可能会遇到需要其他颜色，比如红色、蓝色、白色，又去照相馆重新拍摄的话，既费时又费力，用PS即可轻松搞定。</p><h1 id="方法一：使用替换颜色"><a href="#方法一：使用替换颜色" class="headerlink" title="方法一：使用替换颜色"></a>方法一：使用替换颜色</h1><ul><li><p>1、使用PS打开已存在的证件照，在界面右下图层，<code>复制图层</code></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125141.png"></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125142.png"></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125143.png"></p></li></ul><ul><li><p>2、进行背景色替换</p><ul><li><p><code>图像</code> -&gt; <code>调整</code> -&gt; <code>替换颜色</code></p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125245.png"></p></li><li><p>用吸管吸取背景色，鼠标左键在背景上点击一下</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125246.png"></p></li><li><p>选择下面的色块，在弹出框中设置需要的背景色</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125345.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125344.png"></p></li><li><p>因为颜色容差调的最高200，如果发现肤色不对，可以添加蒙层</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125441.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125440.png"></p></li><li><p>前景色设置为 <code>黑色</code></p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125442.png"></p></li><li><p>使用 <code>画笔工具</code> 在肤色不对的地方涂抹</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125552.png"></p></li></ul></li><li><p>结果对比，细节可自己做优化<br>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125553.png"><br>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125554.png"></p></li></ul><p>参考：<a href="http://www.ps-xxw.cn/shiyongjiqiao/9383.html">http://www.ps-xxw.cn/shiyongjiqiao/9383.html</a></p><h1 id="方法二：使用对象选择工具"><a href="#方法二：使用对象选择工具" class="headerlink" title="方法二：使用对象选择工具"></a>方法二：使用对象选择工具</h1><ul><li><p>1、选用 <code>对象选择工具</code> ，或使用快捷键 <code>W</code></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125730.png"></p><ul><li><p><code>选中主体</code></p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125729.png"></p></li><li><p><code>选择并遮住 ...</code></p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125728.png"></p></li><li><p><code>输出设置</code> 中勾选 <code>净化颜色</code>，点击 <code>确定</code></p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125844.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125845.png"></p></li></ul></li><li><p>2、创建背景图层</p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125925.png"></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205125926.png"></p><ul><li><p>设置新图册的背景色</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130034.png"></p></li><li><p>CTRL + Del</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130033.png"></p></li><li><p>将原图层拖动到新图层上</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130124.gif"></p></li><li><p>完成</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130249.png"></p></li></ul></li></ul><h1 id="方法三：使用色相-饱和度"><a href="#方法三：使用色相-饱和度" class="headerlink" title="方法三：使用色相/饱和度"></a>方法三：使用色相/饱和度</h1><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130325.png"></p><ul><li>吸取背景色</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130326.png"></p><ul><li>滑动色相滑块即可更改背景色</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205130327.gif"></p><hr><p>参考：<a href="https://www.bilibili.com/video/av88003819">ps2020超快速更换证件照背景颜色的</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PhotoShop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Fclone挂载别人的共享云盘，进行搬运</title>
    <link href="/2020/09/04/f99a937c02dc/"/>
    <url>/2020/09/04/f99a937c02dc/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在TG群里加入一个共享云盘，但是管理员只给了 <code>查看者</code> 权限，而且只有一个邮箱在里面，没办法愉快的搬运，所以只能通过曲线救国的方法进行了。</p><!--more--><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>Fclone、SA。如果不了解，或者不想弄，没有SA也可以只是每天有750G上传限制。具体可看前面的博文：</p><ul><li><a href="/2020/09/04/fab61b423009/" title="Google Dirve 系列(01) - 使用AutoRclone生成SA文件">Google Dirve 系列(01) - 使用AutoRclone生成SA文件</a></li><li><a href="/2020/09/04/6c73b8452516/" title="Google Dirve 系列(02) - Gclone &amp; Fclone">Google Dirve 系列(02) - Gclone &amp; Fclone</a></li></ul><h1 id="使用Fclone挂载别人共享云盘"><a href="#使用Fclone挂载别人共享云盘" class="headerlink" title="使用Fclone挂载别人共享云盘"></a>使用Fclone挂载别人共享云盘</h1><p>这里没有什么多说的，使用 <code>fclone config</code> 挂载可以，也可直接写入配置，具体参考上面博文。在挂载别人的共享云盘时，因为你自己的账户有查看权限，所以使用你自己的API来挂载。</p><h2 id="申请Google-API"><a href="#申请Google-API" class="headerlink" title="申请Google API"></a>申请Google API</h2><p>如果没有 <code>Google API</code> 需要申请, 有的话直接跳至 <a href="#jump">挂载他人的共享云盘</a> 。 </p><ul><li><p>进入 <a href="https://console.developers.google.com/">Google API 控制台</a> ，登录你在想要复制的共享云盘的账户，如果没有项目创建一个项目。</p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124213.png"></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124313.png"></p></li><li><p>创建完成后进入项目主页，点击侧边栏 <code>凭据</code> ，如果没有凭据，创建一个。</p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124404.png"></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124405.png"></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124403.png"></p></li><li><p>凭据创建完成后，会弹出 <code>客户端ID</code> 和 <code>客户端密钥</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124524.png"></p><ul><li>也可以在凭借栏里点击客户端ID查看</li></ul></li></ul><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124523.png"></p><ul><li>到此申请Goole API凭借完成。</li></ul><h2 id="挂载他人的共享云盘"><a href="#挂载他人的共享云盘" class="headerlink" title="挂载他人的共享云盘"></a>挂载他人的共享云盘<span id="jump"></span></h2><ul><li><p>通过 <code>fclone config</code> 配置，记得使用自己的API key，配置完成后会生成配置文件 <code>/root/.config/rclone/rclone.conf</code>。查看该文件：</p>  <pre><code class="hljs awk">cat <span class="hljs-regexp">/root/</span>.config<span class="hljs-regexp">/rclone/</span>rclone.conf</code></pre><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124611.png"></p></li></ul><h1 id="挂载自己转存的共享云盘"><a href="#挂载自己转存的共享云盘" class="headerlink" title="挂载自己转存的共享云盘"></a>挂载自己转存的共享云盘</h1><ul><li><p>如果你是通过API，可以直接复制上面查看到的配置，改掉 <code>[NewAlphabet]</code> 名称，该名称是你自己定义的；改 <code>team_drive</code> 的值为你的共享云盘的ID。当然你也可以使用 <code>fclone config</code> 进行配置。</p></li><li><p>如果你使用SA，那个可以类似这样，在配置文件里添加：</p>  <pre><code class="hljs ini"><span class="hljs-section">[byp]</span><span class="hljs-attr">type</span> = drive<span class="hljs-attr">scope</span> = drive<span class="hljs-attr">service_account_file</span> = /root/.config/rclone/SA/<span class="hljs-number">111</span>.json<span class="hljs-attr">service_account_file_path</span> = /root/.config/rclone/SA/<span class="hljs-attr">team_drive</span> = <span class="hljs-number">0</span>AKaaaavsdAUk9PVA</code></pre><ul><li><code>service_account_file</code> 为你的SA中任意一个全路径</li><li><code>service_account_file_path</code> 为你的SA存放目录</li><li><code>team_drive</code> 为你的共享云盘ID</li></ul></li></ul><h1 id="进行复制"><a href="#进行复制" class="headerlink" title="进行复制"></a>进行复制</h1><ul><li><p>此时已经配置好了两个共享云盘，一个 <code>NewAlphabet</code> 是别人的盘，<code>byp</code> 是自己的盘。通过以下命令进行复制，盘的名称可能不同，请对应修改。</p>  <pre><code class="hljs routeros">fclone copy NewAlphabet: byp:<span class="hljs-comment"># 如果要显示速度</span>fclone copy NewAlphabet: byp: -vP<span class="hljs-comment"># 比较合适的一个copy命令</span>fclone copy NewAlphabet: MyNewAlphabet: <span class="hljs-attribute">--stats</span>=1s --stats-one-line -vP <span class="hljs-attribute">--checkers</span>=10 <span class="hljs-attribute">--transfers</span>=10 <span class="hljs-attribute">--drive-pacer-min-sleep</span>=1ms <span class="hljs-attribute">--drive-pacer-burst</span>=10 --check-first</code></pre></li><li><p>我在GCP免费小鸡上的速度。GCP到Google Drive的流量是免费的，所以可以一直跑。同样的，这也可以拿来给OneDrive搬家。</p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205124643.png"></p></li><li><p>后台运行</p><ul><li>可以通过 <code>screen</code> 后台。</li><li>可以通过 <code>shell</code> 脚本后台。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GoogleDrive</tag>
      
      <tag>Fclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google Dirve 系列(02) - Gclone &amp; Fclone</title>
    <link href="/2020/09/04/6c73b8452516/"/>
    <url>/2020/09/04/6c73b8452516/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用SA、Fclone进行本地文件上传，Copy分享链接等。<br>本文不讲 Rclone ，但 Gclone &amp; Fclone 都是基于 Rclone 魔改而来的，默认你对 Rclone 有基本的了解。</p><!--more--><ul><li><p>系列文章</p><ul><li><a href="/2020/09/04/fab61b423009/" title="Google Dirve 系列(01) - 使用AutoRclone生成SA文件">Google Dirve 系列(01) - 使用AutoRclone生成SA文件</a></li><li><p>Google Dirve 系列(02) - Gclone &amp; Fclone</p></li></ul></li></ul><h1 id="Gclone-的安装和使用"><a href="#Gclone-的安装和使用" class="headerlink" title="Gclone 的安装和使用"></a>Gclone 的安装和使用</h1><ul><li><p>项目地址：<a href="https://github.com/donwa/gclone">https://github.com/donwa/gclone</a></p></li><li><p>Linux 一键脚本</p>  <pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">wget</span> -qO- https<span class="hljs-symbol">://git</span>.io/gclone.sh)</code></pre></li><li><p>查看版本</p>  <pre><code class="hljs ada">gclone <span class="hljs-comment">--version</span></code></pre></li><li><p>进行配置，也可直接写配置文件</p>  <pre><code class="hljs arduino">gclone <span class="hljs-built_in">config</span></code></pre><p>  名字为 gc ，可随意，选择团队盘，选择正确的。<br>  “service_account_file”后面的值是生成的accounts里随意的一个.json文件绝对路径。<br>  “service_account_file_path”后面的值是accounts目录绝对路径。</p><p>  直接写入配置。如果没有安装过 Rclone 需要建立文件夹 <code>mkdir -p /root/.config/rclone</code> ， 否则不用。</p><p>  <code>vim /root/.config/rclone/rclone.conf</code></p><p>  例：（名称可改，<code>service_account_file</code> 和 <code>service_account_file_path</code> 根据上面的解释更改，<code>team_drive</code> 为共享云盘的ID）</p>  <pre><code class="hljs ini"><span class="hljs-section">[gc]</span><span class="hljs-attr">type</span> = drive<span class="hljs-attr">scope</span> = drive<span class="hljs-attr">service_account_file</span> = /root/SA/<span class="hljs-number">00004221420057</span>cb7624d3c0dcd7cc2182f87ee8.json<span class="hljs-attr">service_account_file_path</span> = /root/SA<span class="hljs-attr">team_drive</span> = <span class="hljs-number">0</span>AMmeDqxQStamUk9PVA</code></pre></li><li><p>转存用法</p>  <pre><code class="hljs powershell">gclone <span class="hljs-built_in">copy</span> <span class="hljs-built_in">gc</span>:&#123;【源盘】ID&#125; <span class="hljs-built_in">gc</span>:&#123;【目的盘】ID&#125;  -<span class="hljs-literal">-drive</span><span class="hljs-literal">-server</span><span class="hljs-literal">-side</span><span class="hljs-literal">-across</span><span class="hljs-literal">-configs</span></code></pre></li><li><p>显示速度</p>  <pre><code class="hljs diff"><span class="hljs-deletion">-v</span></code></pre></li><li><p>去重</p>  <pre><code class="hljs haxe">gclone dedupe <span class="hljs-keyword">new</span><span class="hljs-type">est</span> gc:<span class="hljs-type"></span>&#123;目录ID&#125;</code></pre></li><li><p>上传本地文件，同 Rclone</p>  <pre><code class="hljs gradle">gclone move <span class="hljs-regexp">/root/</span>Download<span class="hljs-regexp">/ gc:Download/</span>gclone <span class="hljs-keyword">copy</span> <span class="hljs-regexp">/root/</span>Download<span class="hljs-regexp">/ gc:Download/</span></code></pre></li></ul><h1 id="Fclone-的安装和使用"><a href="#Fclone-的安装和使用" class="headerlink" title="Fclone 的安装和使用"></a>Fclone 的安装和使用</h1><ul><li><p>项目地址：<a href="https://github.com/mawaya/rclone">https://github.com/mawaya/rclone</a></p></li><li><p>Linux 一键脚本</p>  <pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">wget</span> -qO- https<span class="hljs-symbol">://git</span>.io/JJYE0)</code></pre></li><li><p>使用方法</p><blockquote><p>gclone 改成 fclone 即可</p></blockquote></li><li><p>查看版本</p>  <pre><code class="hljs ada">fclone <span class="hljs-comment">--version</span></code></pre></li><li><p>转存用法</p>  <pre><code class="hljs routeros">fclone copy gc:&#123;【源盘】ID&#125; gc:&#123;【目的盘】ID&#125;  --drive-server-side-across-configs <span class="hljs-attribute">--stats</span>=1s --stats-one-line -vP <span class="hljs-attribute">--checkers</span>=128 <span class="hljs-attribute">--transfers</span>=128 <span class="hljs-attribute">--drive-pacer-min-sleep</span>=1ms --check-first</code></pre>  <pre><code class="hljs routeros">A：低配VPS推荐--drive-server-side-across-configs <span class="hljs-attribute">--stats</span>=1s --stats-one-line -vP <span class="hljs-attribute">--checkers</span>=128 <span class="hljs-attribute">--transfers</span>=128 <span class="hljs-attribute">--drive-pacer-min-sleep</span>=1ms --check-firstB：低配VPS推荐--drive-server-side-across-configs <span class="hljs-attribute">--stats</span>=1s --stats-one-line -vP <span class="hljs-attribute">--checkers</span>=128 <span class="hljs-attribute">--transfers</span>=256 <span class="hljs-attribute">--drive-pacer-min-sleep</span>=1ms --check-firstC：--drive-server-side-across-configs <span class="hljs-attribute">--stats</span>=1s --stats-one-line -vP <span class="hljs-attribute">--checkers</span>=256 <span class="hljs-attribute">--transfers</span>=256 <span class="hljs-attribute">--drive-pacer-min-sleep</span>=1ms --check-firstD：--drive-server-side-across-configs <span class="hljs-attribute">--stats</span>=1s --stats-one-line -vP <span class="hljs-attribute">--checkers</span>=256 <span class="hljs-attribute">--transfers</span>=256 <span class="hljs-attribute">--drive-pacer-min-sleep</span>=1ms <span class="hljs-attribute">--drive-pacer-burst</span>=5000 --check-firstE:中高配独服以上推荐--drive-server-side-across-configs <span class="hljs-attribute">--stats</span>=1s --stats-one-line -vP <span class="hljs-attribute">--checkers</span>=320 <span class="hljs-attribute">--transfers</span>=320 <span class="hljs-attribute">--drive-pacer-min-sleep</span>=1ms <span class="hljs-attribute">--drive-pacer-burst</span>=5000 --check-first</code></pre></li><li><p>参数说明</p><ul><li><p>服务端传递</p><blockquote><p>–drive-server-side-across-configs</p></blockquote></li><li><p>日常参数</p><blockquote><p>–stats=1s –stats-one-line -vP</p></blockquote></li><li><p>越大越快</p><blockquote><p>–checkers=数字</p></blockquote></li><li><p>越大越快</p><blockquote><p>–transfers=数字</p></blockquote></li><li><p>越小越快</p><blockquote><p>–drive-pacer-min-sleep=数字ms</p></blockquote></li><li><p>越大越快</p><blockquote><p>–drive-pacer-burst=数字</p></blockquote></li><li><p>fmod必须参数</p><blockquote><p>–check-first</p></blockquote></li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Fclone 的速度要优于 Gclone ，但是对于SA的数量和VPS的性能有要求，建议2000以上SA才使用 Fclone，否则 <code>--checkers=数字</code> <code>--transfers=数字</code> <code>--drive-pacer-burst=数字</code> 都设置的低些。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GoogleDrive</tag>
      
      <tag>Gclone</tag>
      
      <tag>Fclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google Dirve 系列(01) - 使用AutoRclone生成SA文件</title>
    <link href="/2020/09/04/fab61b423009/"/>
    <url>/2020/09/04/fab61b423009/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章默认在 <code>Debian</code> 环境下讲解，其他环境仅做参考。<br>使用AutoRclone生成SA，上传文件到共享云盘，突破GoogleDrive每日上传750G限制。</p><!--more--><ul><li><p>系列文章</p><ul><li><p>Google Dirve 系列(01) - 使用AutoRclone生成SA文件</p></li><li><a href="/2020/09/04/6c73b8452516/" title="Google Dirve 系列(02) - Gclone &amp; Fclone">Google Dirve 系列(02) - Gclone &amp; Fclone</a></li></ul></li></ul><h1 id="1、Python3-安装"><a href="#1、Python3-安装" class="headerlink" title="1、Python3 安装"></a>1、Python3 安装</h1><p>2选1即可，如已安装，可跳至  <a href="#2%E3%80%81AutoRclone">AutoRclone</a> 。</p><ul><li><p>1-1、默认仓库安装</p>  <pre><code class="hljs apache"><span class="hljs-attribute">apt</span> install -y python<span class="hljs-number">3</span> python<span class="hljs-number">3</span>-pip</code></pre></li><li><p>1-2、编译安装最新版本（此篇文章书写时为3.8.5）</p><ul><li><p>安装依赖</p><ul><li><p>Debian9及以上</p><pre><code class="hljs q">apt <span class="hljs-keyword">update</span>apt install -y build-essential zlib1g-<span class="hljs-built_in">dev</span> libncurses5-<span class="hljs-built_in">dev</span> libgdbm-<span class="hljs-built_in">dev</span> libnss3-<span class="hljs-built_in">dev</span> libssl-<span class="hljs-built_in">dev</span> libreadline-<span class="hljs-built_in">dev</span> libffi-<span class="hljs-built_in">dev</span></code></pre></li><li><p>Debian8</p><pre><code class="hljs q">echo <span class="hljs-string">&quot;deb http://deb.debian.org/debian stretch main&quot;</span> &gt;&gt; /etc/apt/sources.listapt <span class="hljs-keyword">update</span>apt install -y build-essential zlib1g-<span class="hljs-built_in">dev</span> libncurses5-<span class="hljs-built_in">dev</span> libgdbm-<span class="hljs-built_in">dev</span> libnss3-<span class="hljs-built_in">dev</span> libssl-<span class="hljs-built_in">dev</span> libreadline-<span class="hljs-built_in">dev</span> libffi-<span class="hljs-built_in">dev</span>sed -i &#x27;$d&#x27; /etc/apt/sources.listapt <span class="hljs-keyword">update</span></code></pre></li><li><p>下载Python源码</p>  <pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://www.python.org/ftp/python/<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span>/Python-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.tgz &amp;&amp; tar -xf Python-*.tgz &amp;&amp; rm -rf Python-*.tgz &amp;&amp; cd Python-*</code></pre></li><li><p>编译安装</p>  <pre><code class="hljs gauss">./configure --<span class="hljs-keyword">enable</span>-optimizations<span class="hljs-built_in">make</span> -j$(nproc) &amp;&amp; <span class="hljs-built_in">make</span> install</code></pre></li><li><p>查看版本</p>  <pre><code class="hljs properties"><span class="hljs-attr">python3</span> <span class="hljs-string">-V</span><span class="hljs-attr">pip3</span> <span class="hljs-string">-V</span></code></pre></li><li><p>如果版本不对，添加软连接</p>  <pre><code class="hljs awk">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/python3/</span>bin<span class="hljs-regexp">/python3.8 /u</span>sr<span class="hljs-regexp">/bin/</span>python3ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/python3/</span>bin<span class="hljs-regexp">/pip3.8 /u</span>sr<span class="hljs-regexp">/bin/</span>pip3</code></pre></li></ul></li></ul></li></ul><h1 id="2、AutoRclone"><a href="#2、AutoRclone" class="headerlink" title="2、AutoRclone"></a>2、AutoRclone</h1><ul><li><p>2-1、克隆 <code>AutoRclone</code> 项目</p>  <pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xyou365/</span>AutoRclone</code></pre></li><li><p>2-2、进入目录，并安装环境</p>  <pre><code class="hljs 1c">cd AutoRclone <span class="hljs-meta">&amp;&amp; pip3 install -r requirements.txt</span></code></pre></li><li><p>2-3、获取 <code>Google Api</code> 授权文件</p><ul><li><p>进入 <a href="https://developers.google.com/drive/api/v3/quickstart/python">https://developers.google.com/drive/api/v3/quickstart/python</a> ，点击【Step 1: Turn on the Drive API】下面的 Enable the Drive API 按钮</p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205123520.png"></p></li><li><p>新建项目，名称随意</p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205123616.png"></p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205123617.png"></p></li><li><p>创建成功之后点击 <code>DOWNLOAD CLIENT CONFIGURATION</code> 下载生成的 <code>credentials.json</code> ，并保存</p><p>  <img src="https://cdn.jsdelivr.net/gh/Godcic/ImageShack/images/20201205123615.png"></p></li><li><p>将下载的 <code>credentials.json</code> 上传到VPS的 AutoRclone 目录下</p></li></ul></li><li><p>2-4、生成 Serveice Accounts</p><ul><li><p>方法1：如果之前没创建过项目, 直接运行。创建6个项目（项目0到项目5），开启相关的服务，创建600个service accounts（6个项目，每个项目100个），将600个service accounts的授权文件下载到accounts文件夹下面</p>  <pre><code class="hljs vim"><span class="hljs-keyword">python3</span> gen_sa_accounts.<span class="hljs-keyword">py</span> --quick-setup <span class="hljs-number">5</span></code></pre></li><li><p>方法2：（推荐使用）如果已经有N个项目，现需要创建新的项目并在新的项目中创建service accounts，直接运行。额外创建2个项目（项目N+1到项目N+2），开启相关的服务，创建200个service accounts（2个项目，每个项目100个），将200个service accounts的授权文件下载到accounts文件夹下面</p>  <pre><code class="hljs vim"><span class="hljs-keyword">python3</span> gen_sa_accounts.<span class="hljs-keyword">py</span> --<span class="hljs-keyword">new</span>-<span class="hljs-keyword">only</span> --quick-setup <span class="hljs-number">2</span></code></pre></li><li><p>方法3：如果想用已有的项目来创建service accounts（不创建新的项目），直接运行。注意这会覆盖掉已有的service accounts</p>  <pre><code class="hljs vim"><span class="hljs-keyword">python3</span> gen_sa_accounts.<span class="hljs-keyword">py</span> --quick-setup -<span class="hljs-number">1</span></code></pre></li><li><p>方法4：指定项目创建SA，并下载SA授权文件</p>  <pre><code class="hljs vim"><span class="hljs-keyword">python3</span> gen_sa_accounts.<span class="hljs-keyword">py</span> --enable-services ProjectName<span class="hljs-keyword">python3</span> gen_sa_accounts.<span class="hljs-keyword">py</span> --create-sas ProjectName<span class="hljs-keyword">python3</span> gen_sa_accounts.<span class="hljs-keyword">py</span> --download-<span class="hljs-built_in">keys</span> ProjectName</code></pre></li><li><p>输入后复制返回的网址至浏览器打开，登陆上一步生成 credientials.json 文件时使用的账号，选择 允许 ，然后复制返回的授权代码，粘贴至 SSH 终端，再复制新返回的网址至浏览器打开，使用刚才的账号登陆，点击 启用 ，回到 SSH 终端内按下回车，此时应该开始创建 SA 了，稍等片刻完成后可以看到 /root/AutoRclone/accounts/ 目录下出现了一大堆 .json 后缀的 SA 授权文件。</p></li><li><p>如果是第一次使用，会要求开启API。终端会出现类似 <a href="https://console.developers.google.com/apis/api/iam.googleapis.com/overview?project=926425407557">https://console.developers.google.com/apis/api/iam.googleapis.com/overview?project=926425407557</a> 的提示，此时打开该网址，登录你用来创建SA的谷歌账户开启API。需要开启如下两个API，注意替换projectid为你的终端上显示的。</p><p>  <a href="https://console.developers.google.com/apis/api/serviceusage.googleapis.com/overview?project=926425407557">https://console.developers.google.com/apis/api/serviceusage.googleapis.com/overview?project=926425407557</a><br>  <a href="https://console.developers.google.com/apis/api/iam.googleapis.com/overview?project=926425407557">https://console.developers.google.com/apis/api/iam.googleapis.com/overview?project=926425407557</a></p></li></ul></li><li><p>2-5、获取SA邮箱列表</p><ul><li>通过 <code>SA_Email_Finder.py</code> 获取SA邮箱列表<pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Godcic/</span>script_center<span class="hljs-regexp">/raw/m</span>aster<span class="hljs-regexp">/GDCopy/</span>AutoRclone/SA_Email_Finder.pypython3 SA_Email_Finder.py</code></pre></li></ul></li><li><p>2-6、添加群组</p><ul><li>因为共享云盘只能添加600个邮箱，所以不建议直接将SA的邮箱添加到共享云盘中，而是通过群组添加。访问 <a href="https://groups.google.com/">https://groups.google.com/</a> ，创建群组或使用已有的群组，会有一个群组邮箱地址，将该地址添加到共享云盘成员中，“内容管理员”权限。</li></ul></li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>AutoRclone 的教程结束，下一篇将会讲 <a href="/2020/09/04/6c73b8452516/" title="Gclone &amp; Fclone">Gclone &amp; Fclone</a> 。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GoogleDrive</tag>
      
      <tag>AutoRclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
